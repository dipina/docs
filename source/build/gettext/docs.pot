# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Interlink team
# This file is distributed under the same license as the Interlink package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Interlink \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-05-13 12:33+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../authentication/authentication.rst:4
#: ../../authentication/authentication.rst:4
#: ../../index.rst:9
#: ../../index.rst:9
#: ../../usermanual/usermanual.rst:4
#: ../../usermanual/usermanual.rst:4
msgid "Contents:"
msgstr ""

#: ../../authentication/authentication.rst:2
msgid "Authentication"
msgstr ""

#: ../../authentication/example.rst:2
msgid "Auth flow example"
msgstr ""

#: ../../authentication/example.rst:4
msgid "User has not logged in yet (there is no cookie)."
msgstr ""

#: ../../authentication/example.rst:6
msgid "![Auth1](images/auth/auth1.png)"
msgstr ""

#: ../../authentication/example.rst:8
msgid "After making a GET request to /auth/login, if user is not logged in, browser redirects to the OIDC service where the user can log in with credentials or third party providers, such as Google."
msgstr ""

#: ../../authentication/example.rst:10
msgid "![Login](images/auth/login.png)"
msgstr ""

#: ../../authentication/example.rst:12
msgid "After a successful login, token is stored as a \"samesite\" cookie. Now, all requests made to the backend microservices behind **localhost** (or the site where is running the **auth** microservice) send the cookie together with the request."
msgstr ""

#: ../../authentication/example.rst:14
msgid "![Auth2](images/auth/merged.jpg)"
msgstr ""

#: ../../authentication/example.rst:17
msgid "### How do microservices check that a request is authenticated?"
msgstr ""

#: ../../authentication/example.rst:19
msgid "Each endpoint checks if the access token is present **as a cookie or as an authorization header** (being prioritized the cookie), checks its validity and decodes it to set the *user_data* (contained inside the access token, having name, email and profile image, for example) inside **request** data"
msgstr ""

#: ../../authentication/example.rst:21
msgid "![Auth deps](images/auth/deps.png)"
msgstr ""

#: ../../authentication/example.rst:24
msgid "## Advantages and drawbacks of cookie authentication"
msgstr ""

#: ../../authentication/example.rst:27
msgid "To understand the advantages of this authentication we must really understand how the different services are integrated in the frontend. If we look again at the example of how the interlinker **forum** is integrated into the frontend, we will see that it is done through an iframe that loads the path \"/forum/assets/{id}/viewer/\"."
msgstr ""

#: ../../authentication/example.rst:29
msgid "![Forum integration](images/interlinkers/forumintegration.png)"
msgstr ""

#: ../../authentication/example.rst:31
msgid "<iframe src=\"/forum/assets/{id}/viewer/\" frameBorder=\"0\"></iframe>"
msgstr ""

#: ../../authentication/example.rst:34
msgid "### Alternatives (\"authorization\" header):"
msgstr ""

#: ../../authentication/example.rst:36
msgid "That each service / interlinker integrate its own authentication flow (being complex both to develop and maintain). Likewise, it would entail that the user had to perform the login steps for and for each of the external services that are being injected into the main frontend. **In fact, it would not be possible, because the OIDC provider does not support its loading inside an iframe**."
msgstr ""

#: ../../authentication/example.rst:38
msgid "We should find a plausible way to pass the access token to the service contained in the iframe. One way to do this would be to inject it as a parameter in the iframe's src, which would expose the token:"
msgstr ""

#: ../../authentication/example.rst:40
msgid "``` <iframe src=\"/forum/assets/{id}/viewer?access_token={access_token}\"></iframe> ```"
msgstr ""

#: ../../authentication/example.rst:44
msgid "### Advantages of using cookie-based auth:"
msgstr ""

#: ../../authentication/example.rst:46
msgid "Once a user has logged in once, through any service (main frontend or interlinker GUIs), ALL the services can make authenticated requests."
msgstr ""

#: ../../authentication/example.rst:47
msgid "Logic to implement authentication in any service is trivial and **not framework-dependant**. Given **forum** interlinker as an example, which is developed with NextJS framework, the logic to authenticate an user would be as simple as redirecting the user to the /auth/login route (the auth microservice is responsible to retrieve the token and to set it to a samesite cookie):"
msgstr ""

#: ../../authentication/example.rst:49
msgid "![Auth2](images/auth/nextjs.png)"
msgstr ""

#: ../../authentication/example.rst:51
msgid "(being *auth* object an user_data \"storage object\" in order to access it fastly)"
msgstr ""

#: ../../authentication/example.rst:53
msgid "By the way, **authentication through authorization headers is also allowed (check AuthMiddleware)**"
msgstr ""

#: ../../authentication/example.rst:55
msgid "### Drawbacks:"
msgstr ""

#: ../../authentication/example.rst:57
msgid "All services MUST BE behind the same sitename (being allowed subdomains). In development, this is achieved by the **proxy** microservice, powered by Traefik (take a look in [ROUTING.md](/docs/ROUTING.md))."
msgstr ""

#: ../../authentication/microservice.rst:2
msgid "Auth microservice"
msgstr ""

#: ../../authentication/microservice.rst:4
msgid "Authentication is managed by **auth** microservice, that exposes these endpoints:"
msgstr ""

#: ../../authentication/microservice.rst:6
msgid "/auth/login: redirects to the OIDC provider where the users can log in. Accepts *redirect_on_callback*."
msgstr ""

#: ../../authentication/microservice.rst:11
msgid "Login endpoint implementation"
msgstr ""

#: ../../authentication/microservice.rst:36
msgid "Callback code implementation Gets tokens returned by the OIDC provider and sets the access_token to *auth_token* cookie [samesite](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite). Then, redirects the browser to the path specified by the *redirect_on_callback* cookie after deleting it."
msgstr ""

#: ../../authentication/microservice.rst:62
msgid "/auth/logout: logouts user. Accepts *redirect_on_callback*."
msgstr ""

#: ../../cicd/index.md:2
msgid "SW development, CI & CD policies for INTERLINK software"
msgstr ""

#: ../../cicd/index.md:4
msgid "Continuous Integration (CI)"
msgstr ""

#: ../../cicd/index.md:6
msgid "Unit Tests (UT)"
msgstr ""

#: ../../cicd/index.md:8
msgid "Every SW package should have Unit Tests (UT) provided by SW package authors (developers). Project DevOps (admin) should configure automatic workflow to execute those UT on every push to master branch."
msgstr ""

#: ../../cicd/index.md:11
msgid "SW Releases"
msgstr ""

#: ../../cicd/index.md:13
msgid "Once a SW component archieves an important implementation milestone by developers, its code should be TAGged. For SW version which are intended for any deployment, a SW release should be built per each SW repository based on some existing TAG of the code. There may be many TAGs on the code (e.g. function1-Monday, function2-Tuesday, etc) and not all of them but some sub-set are intended to become a SW release."
msgstr ""

#: ../../cicd/index.md:17
msgid "SW release version is usually based on the TAG value as a kind of extended string for example \"TAG+additional_suffix\" or \"prefix+TAG\". Let's establish the following convention for SW release labels: *v1.X.Y-suffix* for the mid-term pilot demos, where X and Y are minor versions/subversions and suffix may contain date of functionality or configuration label."
msgstr ""

#: ../../cicd/index.md:20
msgid "Having built a SW release should trigger automatic building of a new docker image(s) for this SW repository. Docker images should contain TAG or SW version somewhere in the name of the docker image, for ex. \"image-Interlink-frontend:v3.1\". The deployment of a docker image should be with explicit use of the image (SW release) version suffix \"v3.1\" instead of just \":latest\"."
msgstr ""

#: ../../cicd/index.md:25
msgid "All INTERLINK SW packages should be grouped into a single INTERLINK SW release, with a way to configure which versions (TAGs) of particular SW packages should be included in given version (TAG) of the INTERLINK SW release. For example, INTERLINK SW release version 2.1-zgz consists of the following SW versions per SW package:"
msgstr ""

#: ../../cicd/index.md:26
msgid "Frontend v1.0.8"
msgstr ""

#: ../../cicd/index.md:27
msgid "Backend v1.3.2"
msgstr ""

#: ../../cicd/index.md:28
msgid "Zgz room booking module v1.2.6"
msgstr ""

#: ../../cicd/index.md:29
msgid "VARAM Servicepedia module v1.4.2"
msgstr ""

#: ../../cicd/index.md:30
msgid "etc."
msgstr ""

#: ../../cicd/index.md:32
msgid "Integration Tests (IT)"
msgstr ""

#: ../../cicd/index.md:34
msgid "Once the entire INTERLINK SW release is tagged, this should trigger execution of Integration Tests (IT) to check compatibility between cross-dependent SW packages within the SW release. This process is still not in place and pending clarification."
msgstr ""

#: ../../cicd/index.md:36
msgid "Building of Docker SW images"
msgstr ""

#: ../../cicd/index.md:38
msgid "Once both UT and IT completed in \"green\", i.e. on successfull (OK, without errors) termination of UT + IT pipelines, a new pipeline building docker images should launch."
msgstr ""

#: ../../cicd/index.md:40
msgid "Having no UT/IT available, the pipelines to build docker images should be triggered by having built a SW release per each repository."
msgstr ""

#: ../../cicd/index.md:42
msgid "Continuous Deployment (CD) & Environments"
msgstr ""

#: ../../cicd/index.md:44
msgid "There might be the following SIX environments:"
msgstr ""

#: ../../cicd/index.md:45
msgid "Local"
msgstr ""

#: ../../cicd/index.md:46
msgid "DEV: any push to master triggers re-deployment of latest master code for integration tests."
msgstr ""

#: ../../cicd/index.md:47
msgid "Staging (= DEMO): only docker images built for stable SW releases deployed there."
msgstr ""

#: ../../cicd/index.md:48
msgid "pilot MEF"
msgstr ""

#: ../../cicd/index.md:49
msgid "pilot ZGZ"
msgstr ""

#: ../../cicd/index.md:50
msgid "pilot VARAM"
msgstr ""

#: ../../cicd/index.md:52
msgid "Local Environment"
msgstr ""

#: ../../cicd/index.md:54
msgid "It is a local computer of a SW package developer. He/she can deploy any versions (branches, tags) of SW there in order to develop his/her SW package. This environment has no docker images autocompiled at GitHub repository, no CI/CD pipelines, etc. and it goes completely under responsibility of particular developer himself/herself."
msgstr ""

#: ../../cicd/index.md:56
msgid "Development Environment (DEV)"
msgstr ""

#: ../../cicd/index.md:58
msgid "This environment is used for manual tests of all the SW functionalities, integrations, etc for developers of all the Project SW packages. For this, docker images should be re-built per every new push to master branches by CI pipelines once all UT/IT passed. Once docker image(s) built successfully, CD pipelines are started to deploy those new docker images into DEV server."
msgstr ""

#: ../../cicd/index.md:60
msgid "Staging Environment (DEMO)"
msgstr ""

#: ../../cicd/index.md:62
msgid "This environment is used for non-developer members of the project for demonstrations and GUI testing and feedback purposes. For this, docker images are built by CI pipeline out of latest TAGs assigned per every SW package, having all packages passed UT/IT successfully.  The DEMO server is intended for testing and training sessions with business users, and their work should not be suddenly interrupted by a new docker image deployment. That's why, once the docker images with new staging SW versions are built, DevOps admin should announce to testing users and somehow coordinate with them day and time of deployment of the new SW to the staging (DEMO) server."
msgstr ""

#: ../../cicd/index.md:65
msgid "Pilot Servers (ZGZ, MEF, VARAM)"
msgstr ""

#: ../../cicd/index.md:67
msgid "Deployment of INTERLINK SW to pilot servers should contain the same common INTERLINK base SW (web portal + common interlinkers + other platform type components like DBs, auth, logging, etc.) and optionally pilot-specific components (e.g., ZGZ room booking for ZGZ pilot, Servicepedia for VARAM, etc.). Functionality of the common SW components (listed above) should be the same, just some customizations (e.g., language translations) may be applied at configuration level, so no need to have separate code branches, but profiles of configuration files. The deployment process should be similar to deploying on staging (demo) server, and be customized via environment variables. Normally DevOps should take care of customization of deployment, having provided customizations of SW components from developers."
msgstr ""

#: ../../cicd/index.md:72
msgid "Software Updates"
msgstr ""

#: ../../cicd/index.md:74
msgid "Minor updates (patches)"
msgstr ""

#: ../../cicd/index.md:76
msgid "Minor SW updates are needed when there is either a bug fix or small functionality improvement which (almost) does not affect (of affects very little) other SW components, API interfaces, Data Model, etc. Usually the reason for such SW update appears during SW testing and corresponding issue is created in redmine for corresponding SW component. Fixing the SW code should start a.s.a.p. New SW release with minor version incremented (for ex. 3.2.1) should be created. Deployment should be done on first possible occasion (e.g. over night or a weekend)."
msgstr ""

#: ../../cicd/index.md:78
msgid "Such SW change may happen within the same SW release, for example, during the first pilot demo sessions. It is a good practice to have accumulated several patches (bugfixes and minor improvements) together to plan, build, announce and deploy a new minor release to the pilot servers. The workflow is as follows: users report bugs or propose improvements in redmine, developers provide TAGged code update in the GIT for them and report to PM for planning the deployment, then deployment goes as planned by PMs."
msgstr ""

#: ../../cicd/index.md:81
msgid "Major SW updates (new SW release)"
msgstr ""

#: ../../cicd/index.md:83
msgid "Such code update corresponds to implementing a new significant functionality. New SW release should be built and deployed with new major version (e.g. 3.2 or 3.2.0). Usually the new SW release should keep back-compatibility, the same SW design, interfaces, system architecture and data models should be preserved, but could be extended."
msgstr ""

#: ../../cicd/index.md:85
msgid "Such SW change should happend per different project milestones, for example, there will be initial and final pilot demonstrations with different SW releases. Planning such milestones is done by the entire project. Currently we assume mid-term pilot demos being v1.x.y and end of project pilot demos to be v2.x.y."
msgstr ""

#: ../../cicd/index.md:87
msgid "SW refactoring"
msgstr ""

#: ../../cicd/index.md:89
msgid "This is very rare case when system architecrue, API interfaces and/or data model are changed significantly or recreated anew. For API this would imply new documentation and testing, for DB this would imply data migration from old DBs into the new ones, with corresponding DB data export and import scriprs, etc."
msgstr ""

#: ../../cicd/index.md:91
msgid "Such SW changes usually should not happen within the lifetime of the same project. It may happend when a new project is started as a continuation of another one."
msgstr ""

#: ../../cicd/index.md:93
msgid "Docker-compose profiling"
msgstr ""

#: ../../cicd/index.md:95
msgid "Docker-compose profiling is a useful mechamism to structure and group lower and upper level SW services within docker-compose YAML file. It is described in details here: https://docs.docker.com/compose/profiles/"
msgstr ""

#: ../../cicd/index.md:98
msgid "The idea is to try to have separate docker-compose files per each SW service and to include (or exclude) them into the deployment of particular environment."
msgstr ""

#: ../../cicd/index.md:100
msgid "This part of configuration may still be under revision and improvement by DevOps. Currently it is supposed that DevOps will adjust configurations per pilot deployment, while package developers should just provide a stable and well tested version of their SW code."
msgstr ""

#: ../../cicd/index.md:102
msgid "Data persistency"
msgstr ""

#: ../../cicd/index.md:104
msgid "For the first pilot demos the configuration data is read out from JSON files stored in GitHub SW repository. The user activity data (new co-production processes, task state changes and asset instances) are kept as long as the DB docker container is not reinstralled. On DB container re-deployment these data may be lost."
msgstr ""

#: ../../cicd/index.md:106
msgid "Current situation"
msgstr ""

#: ../../cicd/index.md:108
msgid "If DB is part of the SW release (e.g. web portal) and requires re-deplyment on re-installation of the web portal, then to allow bugfix SW updates during the pilot demo sessions but at the same time to keep the user activity data, corresponding data export and import should be realized by use of additional data export/import scripts."
msgstr ""

#: ../../cicd/index.md:110
msgid "Separation of platfrom SW services"
msgstr ""

#: ../../cicd/index.md:112
msgid "Another approach would be to have low level platform services like DB separated from web portal and other components, so re-deployment of web portal (either backend and/or frontend) should not re-deploy the DB container. In this way, the same DB continues to run keeping the accumulated data."
msgstr ""

#: ../../cicd/index.md:114
msgid "Data backups"
msgstr ""

#: ../../cicd/index.md:116
msgid "Backing up data is a goog practice independently on the DB container configuration and re-deployment policies. Having data backed up periodically will save from the global crashes at the level of hosting server, as well as from incidental data loss during e.g. maintenance or other activities. Backed up data should be kept on physically different server, ideally, on different hosting data center location."
msgstr ""

#: ../../datamodel/index.md:1
msgid "Data models"
msgstr ""

#: ../../datamodel/index.md:3
msgid "![Catalogue](catalogue.png) ![Coproduction](coproduction.png)"
msgstr ""

#: ../../datamodel/index.md:3
msgid "Catalogue"
msgstr ""

#: ../../datamodel/index.md:3
msgid "Coproduction"
msgstr ""

#: ../../datamodel/index.md:6
msgid "Migrations https://stackoverflow.com/questions/24612395/how-do-i-execute-inserts-and-updates-in-an-alembic-upgrade-script"
msgstr ""

#: ../../datamodel/index.md:9
msgid "https://github.com/interlink-project/backend-catalogue/tree/master/catalogue/alembic/versions https://github.com/interlink-project/backend-catalogue/tree/master/coproduction/alembic/versions"
msgstr ""

#: ../../environments/index.md:2
msgid "Setup local development environment"
msgstr ""

#: ../../environments/index.md:4
msgid "To get a local copy up and running follow these simple example steps."
msgstr ""

#: ../../environments/index.md:6
msgid "Prerequisites"
msgstr ""

#: ../../environments/index.md:8
msgid "Install [docker-compose](https://docs.docker.com/compose/install/) to run this project."
msgstr ""

#: ../../environments/index.md:10
msgid "Installation"
msgstr ""

#: ../../environments/index.md:12
#: ../../environments/index.md:35
msgid "linux or macOS:"
msgstr ""

#: ../../environments/index.md:20
msgid "To START all containers:"
msgstr ""

#: ../../environments/index.md:26
msgid "To STOP all containers:"
msgstr ""

#: ../../environments/index.md:31
msgid "![Setup](images/setup.gif)"
msgstr ""

#: ../../environments/index.md:31
msgid "Setup"
msgstr ""

#: ../../environments/index.md:33
msgid "(Optional) Seed databases with data **can throw errors because we are constantly making changes to the database model**"
msgstr ""

#: ../../environments/index.md:42
msgid "windows: *soon*"
msgstr ""

#: ../../index.rst:7
msgid "Welcome to Interlink's documentation!"
msgstr ""

#: ../../index.rst:23
msgid "Indices and tables"
msgstr ""

#: ../../index.rst:25
msgid ":ref:`genindex`"
msgstr ""

#: ../../index.rst:26
msgid ":ref:`modindex`"
msgstr ""

#: ../../index.rst:27
msgid ":ref:`search`"
msgstr ""

#: ../../interlinkers/index.md:1
msgid "Interlinkers integration"
msgstr ""

#: ../../interlinkers/index.md:2
msgid "This project is intended to sum up the different interlinkers developed for the project. But, ¿what is an interlinker?"
msgstr ""

#: ../../interlinkers/index.md:4
msgid "An *interlinker* is a tool that is used to create assets by *instantiating* them. These interlinkers can be classified by its *nature*: **software** or **knowledge**."
msgstr ""

#: ../../interlinkers/index.md:6
msgid "**Software interlinkers**:"
msgstr ""

#: ../../interlinkers/index.md:8
msgid "Are software based interlinkers that create assets. For example, **forum** interlinker can be instantiated to create a forum where users can create channels and send messages. This \"forum instance\" is called an \"asset\"."
msgstr ""

#: ../../interlinkers/index.md:10
msgid "**Knowledge interlinkers**:"
msgstr ""

#: ../../interlinkers/index.md:12
msgid "Refer to assets made by users that can be used as templates. For example, an user can create a google drive word document using **googledrive** interlinker and add some text to it. Now, this document could be reused, as if it was a template."
msgstr ""

#: ../../interlinkers/index.md:14
msgid "A knowledge interlinker points to the software interlinker used to create an asset (softwareinterlinker_id) and the id of the specific asset that should be treated as the template (genesis_asset_id)."
msgstr ""

#: ../../interlinkers/index.md:16
msgid "![Interlinkers models](images/integration/model.png)"
msgstr ""

#: ../../interlinkers/index.md:16
msgid "Interlinkers models"
msgstr ""

#: ../../interlinkers/index.md:18
msgid "This allows us to create knowledge interlinkers based on any software interlinker (with some conditions, as it is going to be explained later):"
msgstr ""

#: ../../interlinkers/index.md:20
msgid "Survey: create survey templates for specific aspects that users could reuse (such us \"Survey for interlinker quality assurance\")"
msgstr ""

#: ../../interlinkers/index.md:21
msgid "Googledrive: (google apps) create document, slides or sheet templates"
msgstr ""

#: ../../interlinkers/index.md:22
msgid "Etherpad: create document templates"
msgstr ""

#: ../../interlinkers/index.md:24
msgid "..."
msgstr ""

#: ../../interlinkers/index.md:27
msgid "Endpoints needed for SOFTWARE INTERLINKERS integration"
msgstr ""

#: ../../interlinkers/index.md:29
msgid "Each interlinker is treated as an independent component, so they can be developed with any framework or tool (MEAN, MERN, django, NextJS... the possibilities are infinite). But they all need to expose these endpoints to integrate them:"
msgstr ""

#: ../../interlinkers/index.md:31
msgid "**Instantiate assets:**"
msgstr ""

#: ../../interlinkers/index.md:33
msgid "**WHAT:** basic GUI por asset instantiation. This is gonna be iframed."
msgstr ""

#: ../../interlinkers/index.md:34
#: ../../interlinkers/index.md:51
#: ../../interlinkers/index.md:69
#: ../../interlinkers/index.md:89
msgid "**Method:** GET"
msgstr ""

#: ../../interlinkers/index.md:35
msgid "**URL:** /assets/instantiate"
msgstr ""

#: ../../interlinkers/index.md:36
msgid "Messages for the main frontend integration:"
msgstr ""

#: ../../interlinkers/index.md:37
msgid "When initialized, send a message to the parent like { 'code': 'initialized', }"
msgstr ""

#: ../../interlinkers/index.md:38
msgid "When asset created, send a message to the parent like { 'code': 'asset_created', 'message': data of the asset }"
msgstr ""

#: ../../interlinkers/index.md:39
#: ../../interlinkers/index.md:71
#: ../../interlinkers/index.md:91
msgid "Examples:"
msgstr ""

#: ../../interlinkers/index.md:40
msgid "googledrive interlinker (left): file input"
msgstr ""

#: ../../interlinkers/index.md:41
msgid "survey interlinker (right): form name and description"
msgstr ""

#: ../../interlinkers/index.md:43
msgid "![Google Drive instantiate](images/integration/instantiators.png)"
msgstr ""

#: ../../interlinkers/index.md:43
msgid "Google Drive instantiate"
msgstr ""

#: ../../interlinkers/index.md:46
msgid "etherpad: text input for specifying a name"
msgstr ""

#: ../../interlinkers/index.md:48
msgid "**Data of given asset:**"
msgstr ""

#: ../../interlinkers/index.md:50
msgid "**WHAT:** returns data for given asset."
msgstr ""

#: ../../interlinkers/index.md:52
#: ../../interlinkers/index.md:83
msgid "**URL:** /assets/{id}"
msgstr ""

#: ../../interlinkers/index.md:54
msgid "It must return these values"
msgstr ""

#: ../../interlinkers/index.md:66
msgid "**Viewer for given asset:**"
msgstr ""

#: ../../interlinkers/index.md:68
msgid "**WHAT:** shows GUI for given asset."
msgstr ""

#: ../../interlinkers/index.md:70
msgid "**URL:** /assets/{id}/view"
msgstr ""

#: ../../interlinkers/index.md:72
msgid "googledrive interlinker (left): redirects to Google Drive"
msgstr ""

#: ../../interlinkers/index.md:73
msgid "survey (right): renders HTML"
msgstr ""

#: ../../interlinkers/index.md:75
msgid "![Asset data](images/integration/viewers.png)"
msgstr ""

#: ../../interlinkers/index.md:75
#: ../../interlinkers/index.md:96
msgid "Asset data"
msgstr ""

#: ../../interlinkers/index.md:77
msgid "etherpad: renders an iframe that shows etherpad GUI running in a diferent location (such as /etherpad/p/{padID})"
msgstr ""

#: ../../interlinkers/index.md:79
msgid "**Delete existing asset:**"
msgstr ""

#: ../../interlinkers/index.md:81
msgid "**WHAT:** deletes assets by id"
msgstr ""

#: ../../interlinkers/index.md:82
msgid "**Method:** DELETE"
msgstr ""

#: ../../interlinkers/index.md:86
msgid "**[OPTIONAL] Editor for given asset:**"
msgstr ""

#: ../../interlinkers/index.md:88
msgid "**WHAT:** shows GUI for editing some asset."
msgstr ""

#: ../../interlinkers/index.md:90
msgid "**URL:** /assets/{id}/edit"
msgstr ""

#: ../../interlinkers/index.md:92
msgid "googledrive interlinker: not necessary"
msgstr ""

#: ../../interlinkers/index.md:93
msgid "etherpad: not necessary"
msgstr ""

#: ../../interlinkers/index.md:94
msgid "survey: renders a GUI for modifying the survey"
msgstr ""

#: ../../interlinkers/index.md:96
msgid "![Asset data](images/integration/editor.png)"
msgstr ""

#: ../../interlinkers/index.md:98
msgid "**[OPTIONAL] Clone given asset:**"
msgstr ""

#: ../../interlinkers/index.md:100
msgid "**WHAT:** clones asset given an id."
msgstr ""

#: ../../interlinkers/index.md:101
msgid "**Method:** POST"
msgstr ""

#: ../../interlinkers/index.md:102
msgid "**URL:** /assets/{id}/clone"
msgstr ""

#: ../../interlinkers/index.md:104
msgid ":warning: If /clone not specified, the interlinker can not be used to generate knowledge interlinkers."
msgstr ""

#: ../../interlinkers/index.md:106
msgid "Furthermore, interlinkers can implement any other endpoints needed for its functionality. For example, Googledrive (left) and survey (right) interlinker implements:"
msgstr ""

#: ../../interlinkers/index.md:108
msgid "![APIS](images/integration/APIS.png)"
msgstr ""

#: ../../interlinkers/index.md:108
msgid "APIS"
msgstr ""

#: ../../interlinkers/index.md:111
msgid "In conclusion:"
msgstr ""

#: ../../interlinkers/index.md:125
msgid "Example flow with Googledrive interlinker"
msgstr ""

#: ../../interlinkers/index.md:127
msgid "VIDEO: https://youtu.be/N3jB3lwOsRo"
msgstr ""

#: ../../interlinkers/index.md:129
msgid "When the user selects a file, a POST request to /api/v1/assets **OF THE INTERLINKER** (in this case /googledrive/api/v1/assets) is made with the data needed for the asset instantiation (in this case, the file). When response received, a message to the parent is sent with the asset data:"
msgstr ""

#: ../../interlinkers/index.md:131
msgid "![Googledrive instantiator code](images/integration/code.png)"
msgstr ""

#: ../../interlinkers/index.md:131
msgid "Googledrive instantiator code"
msgstr ""

#: ../../interlinkers/index.md:133
msgid "When the **Collaborative Environment frontend** receives the message, makes a POST request to /coproduction/api/v1/assets/ to store that asset for the task where the user has pressed \"Add asset\" button."
msgstr ""

#: ../../interlinkers/index.md:135
msgid "![Collaborative environment message listener](images/integration/frontend.png)"
msgstr ""

#: ../../interlinkers/index.md:135
msgid "Collaborative environment message listener"
msgstr ""

#: ../../testing/acceptance-tests/index.md:1
msgid "User Acceptance testing"
msgstr ""

#: ../../testing/acceptance-tests/index.md:13
msgid "This document ilustrates the different tests needed to ensure that the expected functionality, from the end-user's point of view, of the INTERLINK Collaborative Environment is met. The main Purpose of UAT is to validate end to end business flow. It does not focus on cosmetic errors, spelling mistakes or system testing. User Acceptance Testing is carried out in a separate testing environment with production-like data setup. It is kind of black box testing where two or more end-users will be involved. User acceptance testing is needed for **testing whether the final product is accepted by client/end-user**."
msgstr ""

#: ../../testing/acceptance-tests/index.md:15
msgid "Smoke Testing"
msgstr ""

#: ../../testing/acceptance-tests/index.md:17
msgid "The first section carries out a so-called *Smoke Testing*"
msgstr ""

#: ../../testing/acceptance-tests/index.md:27
msgid "The following Smoke Testing should be applied over [INTERLINK's staging server](https://demo.interlink-project.eu/):"
msgstr ""

#: ../../testing/acceptance-tests/index.md:29
msgid "Before using the Collaborative environment, you must first login with your google credentials or create your own credentials at [https://demo.interlink-project.eu/](https://demo.interlink-project.eu/), i.e. the staging server of INTERLINK. **IMPORTANT**: All members of an envisaged team must logged into the platform before they can be added to a team. ![Login required screen](images/image0.PNG) ![AAC screen](images/image1.PNG)"
msgstr ""

#: ../../testing/acceptance-tests/index.md:29
msgid "Login required screen"
msgstr ""

#: ../../testing/acceptance-tests/index.md:29
msgid "AAC screen"
msgstr ""

#: ../../testing/acceptance-tests/index.md:30
msgid "Create a team which wants to take part in a co-production process. ![Two user sessions](images/image2.PNG) ![Creating a team](images/image3.png) ![Adding a user](images/image4.png) ![Team editing window](images/image5.png)"
msgstr ""

#: ../../testing/acceptance-tests/index.md:30
msgid "Two user sessions"
msgstr ""

#: ../../testing/acceptance-tests/index.md:30
msgid "Creating a team"
msgstr ""

#: ../../testing/acceptance-tests/index.md:30
msgid "Adding a user"
msgstr ""

#: ../../testing/acceptance-tests/index.md:30
msgid "Team editing window"
msgstr ""

#: ../../testing/acceptance-tests/index.md:31
msgid "Create a co-production project where the activity to co-create is assessed ![Creating a new co-production project](images/image6.png)"
msgstr ""

#: ../../testing/acceptance-tests/index.md:31
msgid "Creating a new co-production project"
msgstr ""

#: ../../testing/acceptance-tests/index.md:32
msgid "Link the created team to the created co-production process. ![Select Team menu option and \"Add new Team\" button](images/image8.png) ![Click on pop-up window's Add team button](images/image9.png)"
msgstr ""

#: ../../testing/acceptance-tests/index.md:32
msgid "Select Team menu option and \"Add new Team\" button"
msgstr ""

#: ../../testing/acceptance-tests/index.md:32
msgid "Click on pop-up window's Add team button"
msgstr ""

#: ../../testing/acceptance-tests/index.md:33
msgid "Choose a co-production process guide (flexibility to choose the best fitting schema)"
msgstr ""

#: ../../testing/acceptance-tests/index.md:34
msgid "Notice that there are several co-production trees available. We will take the one named \"Default schema\" ![Select default schema](images/image7.png)"
msgstr ""

#: ../../testing/acceptance-tests/index.md:34
msgid "Select default schema"
msgstr ""

#: ../../testing/acceptance-tests/index.md:35
msgid "Beware of emergence of Guide view menu item on left hand side ![Beware of emergence of Guide view menu item on left hand side](images/image10.png)"
msgstr ""

#: ../../testing/acceptance-tests/index.md:35
msgid "Beware of emergence of Guide view menu item on left hand side"
msgstr ""

#: ../../testing/acceptance-tests/index.md:36
msgid "You may customize such tree to the specific needs of your co-production process. Currently only DELETE task allowed, soon we will be able to add new objectives & tasks. Check below how a task is removed after having clicked on the PENCIL icon which appears on the right hand side of the task visualization panel. ![About to remove a task](images/image11.png) ![View after removal of task](images/image12.png)"
msgstr ""

#: ../../testing/acceptance-tests/index.md:36
msgid "About to remove a task"
msgstr ""

#: ../../testing/acceptance-tests/index.md:36
msgid "View after removal of task"
msgstr ""

#: ../../testing/acceptance-tests/index.md:39
msgid "Observe that specific co-production trees can be defined and, hence, selected (e.g. VARAM case)"
msgstr ""

#: ../../testing/acceptance-tests/index.md:40
msgid "You may also assign durations to tasks ![Assigning duration to task](images/image13.png)"
msgstr ""

#: ../../testing/acceptance-tests/index.md:40
msgid "Assigning duration to task"
msgstr ""

#: ../../testing/acceptance-tests/index.md:42
msgid "Then we can see in WORKPLAN view the time span defined, by clicking on the \"Time planification\" link in the GUIDE view or clicking on the left hand side menu option named \"Workplan\". You may return to the Workplan view, to see the task details by clicking on the name of the task in the WORKPLAN view.  ![Workplan view](images/image14.png)"
msgstr ""

#: ../../testing/acceptance-tests/index.md:42
msgid "Workplan view"
msgstr ""

#: ../../testing/acceptance-tests/index.md:44
msgid "Create new roles and new teams with different rights than the core co-producers’ team. Currently a role applies to all phases, objectives and tasks of a co-production process."
msgstr ""

#: ../../testing/acceptance-tests/index.md:45
msgid "Create a new team  ![Creating a new team](images/image15.png)"
msgstr ""

#: ../../testing/acceptance-tests/index.md:45
msgid "Creating a new team"
msgstr ""

#: ../../testing/acceptance-tests/index.md:47
msgid "Create a new role, assigning it the right to \"View resources\" only ![Creation of co-observers role](images/image16.png)"
msgstr ""

#: ../../testing/acceptance-tests/index.md:47
msgid "Creation of co-observers role"
msgstr ""

#: ../../testing/acceptance-tests/index.md:49
msgid "Assign the role of co-observers to the co-observers team ![Assignment of co-observers role to co-observers team](images/image17.png)"
msgstr ""

#: ../../testing/acceptance-tests/index.md:49
msgid "Assignment of co-observers role to co-observers team"
msgstr ""

#: ../../testing/acceptance-tests/index.md:51
msgid "Use the guide to co-produce SOMETHING, e.g. new document to collect feedback of collaboration process. For each of the tasks in the co-production phases you may select any of the recommended INTERLINKERs or instantiate a new one based on the generic software INTERLINKERs available at the bottom of the screen shown when selecting a co-production task."
msgstr ""

#: ../../testing/acceptance-tests/index.md:52
msgid "Select another task in the GUIDE view, e.g. ENGAGE > Engage Stakeholders > Create awareness and Communication"
msgstr ""

#: ../../testing/acceptance-tests/index.md:53
msgid "Notice the INTERLINKERs recommended ![Notice INTERLINKERs recommended](images/image22.png)"
msgstr ""

#: ../../testing/acceptance-tests/index.md:53
msgid "Notice INTERLINKERs recommended"
msgstr ""

#: ../../testing/acceptance-tests/index.md:55
msgid "Select a task in the GUIDE view, e.g. ENGAGE > Define legal and ethical framework > Define a non-disclosure agreement (NDA)"
msgstr ""

#: ../../testing/acceptance-tests/index.md:56
msgid "Click on the blue button at the bottom entitled \"Initiate Procedure\" to give place to a new Google Docs document ![Creating a new Google Docs](images/image18.png)"
msgstr ""

#: ../../testing/acceptance-tests/index.md:56
msgid "Creating a new Google Docs"
msgstr ""

#: ../../testing/acceptance-tests/index.md:58
msgid "Select the type of document to create with the support of Google Drive INTERLINKER ![Select and name the Google Docs](images/image19.png)"
msgstr ""

#: ../../testing/acceptance-tests/index.md:58
msgid "Select and name the Google Docs"
msgstr ""

#: ../../testing/acceptance-tests/index.md:60
msgid "Realize about the new resource that appears at the bottom of the task description panel ![New resource created](images/image20.png)"
msgstr ""

#: ../../testing/acceptance-tests/index.md:60
#: ../../testing/acceptance-tests/index.md:62
msgid "New resource created"
msgstr ""

#: ../../testing/acceptance-tests/index.md:62
msgid "Open it in Google Drive by clicking on the newly created resource name ![New resource created](images/image21.png)"
msgstr ""

#: ../../testing/acceptance-tests/index.md:64
msgid "Review progress of project in OVERVIEW  ![Resources created so far](images/image22.png)"
msgstr ""

#: ../../testing/acceptance-tests/index.md:64
msgid "Resources created so far"
msgstr ""

#: ../../testing/acceptance-tests/index.md:66
msgid "Check functionality of the INTERLINK catalogue by clicking on INTERLINKERs, browsing, filtering and selecting INTERLINKERs."
msgstr ""

#: ../../testing/acceptance-tests/index.md:67
msgid "Enter in the catalogue of INTERLINNKERs by clicking on INTERLINKERs top menu ![INTERLINKERs catalogue view](images/image23.png)"
msgstr ""

#: ../../testing/acceptance-tests/index.md:67
msgid "INTERLINKERs catalogue view"
msgstr ""

#: ../../testing/acceptance-tests/index.md:69
msgid "Filter by selecting options on Nature filter ![Filtered INTERLINKERs](images/image24.png)"
msgstr ""

#: ../../testing/acceptance-tests/index.md:69
#: ../../testing/acceptance-tests/index.md:71
#: ../../testing/acceptance-tests/index.md:73
msgid "Filtered INTERLINKERs"
msgstr ""

#: ../../testing/acceptance-tests/index.md:71
msgid "Review contents of an INTERLINKER by clicking on its title ![Filtered INTERLINKERs](images/image26.png)"
msgstr ""

#: ../../testing/acceptance-tests/index.md:73
msgid "You main review what it offers by visiting Preview tab ![Filtered INTERLINKERs](images/image27.png)"
msgstr ""

#: ../../testing/acceptance-tests/index.md:76
msgid "Acceptance testing"
msgstr ""

#: ../../testing/acceptance-tests/index.md:78
msgid "Next, we will illustrate how to perform a more exhaustive suite of manual tests that expore all currently available functionalities within the Collaborative Environment."
msgstr ""

#: ../../testing/acceptance-tests/index.md:80
msgid "The steps to validate that the miminum functionalities to allow a collaborative process to be materialized are listed below:"
msgstr ""

#: ../../testing/acceptance-tests/index.md:82
msgid "**Ensure that team members have logged in at least once** at [INTERLINK's staging server](https://demo.interlink-project.eu/)"
msgstr ""

#: ../../testing/acceptance-tests/index.md:83
msgid "Ensure that two sessions at least are opened, e.g. one for user user1@deusto.es and another one for user user2@gmail.com, to be able to test the environment's collaborative features sensibly."
msgstr ""

#: ../../testing/acceptance-tests/index.md:84
msgid "**Create a team** *“INTERLINK co-production team for co-evaluation of collaborative environment”* which will jointly generate an assessment of the environment and its capabilities to carry out collaborative processes. Add at least 2 members to the team, e.g. user1@deusto.es and user2@gmail.com"
msgstr ""

#: ../../testing/acceptance-tests/index.md:85
msgid "**Create a co-production project**, namely *“Co-evaluation of the co-production process”*"
msgstr ""

#: ../../testing/acceptance-tests/index.md:86
msgid "**Go to Settings** and ensure that the project has a good logo. Click on the pencil icon and then SAVE."
msgstr ""

#: ../../testing/acceptance-tests/index.md:87
msgid "Click on **“Team” left hand side** menu and **add the created Team to the project**."
msgstr ""

#: ../../testing/acceptance-tests/index.md:88
msgid "You can modify the team composition at any time by clicking on the hyperlink of the Team name."
msgstr ""

#: ../../testing/acceptance-tests/index.md:89
msgid "Click on **“Overview”** and **select the co-production schema** (tree) to use. Choose *“Default schema”*"
msgstr ""

#: ../../testing/acceptance-tests/index.md:90
msgid "Hit on **“Guide” left hand side menu option** and let’s start as a team co-evaluating the collaborative environment"
msgstr ""

#: ../../testing/acceptance-tests/index.md:91
msgid "**Browse through the different phases** of the co-production guide"
msgstr ""

#: ../../testing/acceptance-tests/index.md:92
msgid "Select different phases"
msgstr ""

#: ../../testing/acceptance-tests/index.md:93
msgid "**Select objectives** within a phase"
msgstr ""

#: ../../testing/acceptance-tests/index.md:94
msgid "**Select tasks** within an objective"
msgstr ""

#: ../../testing/acceptance-tests/index.md:95
msgid "**Observe that different INTERLINKERs are recommeded** for different tasks"
msgstr ""

#: ../../testing/acceptance-tests/index.md:96
msgid "**Instantiate a generic INTERLINKER**, where feedback with your observations can be gathered in a shared Google Docs with the rest of the co-evaluators"
msgstr ""

#: ../../testing/acceptance-tests/index.md:97
msgid "In **GUIDE view**, select *BUILD > Technical Implementation > Technical implementation*"
msgstr ""

#: ../../testing/acceptance-tests/index.md:98
msgid "Hit on **“Initiate Procedure” > “Create a Google Drive document”**, and create a new asset entitled *“Feedback about usage of Collaborative Environment”*"
msgstr ""

#: ../../testing/acceptance-tests/index.md:99
msgid "Ensure that all team members edit and insert their comments in such shared document"
msgstr ""

#: ../../testing/acceptance-tests/index.md:100
msgid "Notice that they all could **access to feedback document when clicking on Overview** menu option on the left hand side."
msgstr ""

#: ../../testing/acceptance-tests/index.md:101
msgid "Explore how to **navigate across the different views** of the Collaborative Environment."
msgstr ""

#: ../../testing/acceptance-tests/index.md:102
msgid "Explore navigation between “Guide” view and “Workplan” view by hitting on **“Time planification”**, once **within a chosen task**"
msgstr ""

#: ../../testing/acceptance-tests/index.md:103
msgid "Test changing the **Time planification** of a task, by hitting on the **pencil** and selecting start and end period, under the task screen within GUIDE view"
msgstr ""

#: ../../testing/acceptance-tests/index.md:104
msgid "Explore navigation between “Overview” view and “Guide” view by hitting on **“See Task”**"
msgstr ""

#: ../../testing/acceptance-tests/index.md:105
msgid "Use one of the **recommended INTERLINKERs**"
msgstr ""

#: ../../testing/acceptance-tests/index.md:106
msgid "For instance, select *\"Stakeholders Mapping Canvas\"* INTERLINKER under task shown when navigating to *Engage > Identify Stakeholders*"
msgstr ""

#: ../../testing/acceptance-tests/index.md:107
msgid "Click on button “Instantiate as resource to use in the project”"
msgstr ""

#: ../../testing/acceptance-tests/index.md:108
msgid "Check the newly created resource appears at the bottom of the page under **“Current resources”**"
msgstr ""

#: ../../testing/acceptance-tests/index.md:109
msgid "Open the generated resource in the form of a presentation and add some modifications"
msgstr ""

#: ../../testing/acceptance-tests/index.md:110
msgid "Check that different recommended INTERLINKERs or those generic ones instantiated through **\"Initiate Procedure\" button** can be started"
msgstr ""

#: ../../testing/acceptance-tests/index.md:111
msgid "Continue inspecting the different tasks and INTERLINKERs that are recommended for 5’"
msgstr ""

#: ../../testing/acceptance-tests/index.md:112
msgid "During the whole process **PLEASE GATHER YOUR IMPRESSIONS / FEEDBACK on the shared document entitled “Feedback about usage of Collaborative Environment”**"
msgstr ""

#: ../../testing/acceptance-tests/index.md:113
msgid "Remember that from **OVERVIEW**, you can simply click on the resource title to be able to open it."
msgstr ""

#: ../../testing/acceptance-tests/index.md:114
msgid "In order to **provide direct feedback** on any mistakes, bugs requested please use the following two channels:"
msgstr ""

#: ../../testing/acceptance-tests/index.md:115
msgid "Fill in the **[ALPHA QUESTIONNAIRE](https://docs.google.com/forms/d/e/1FAIpQLSei2Iful343wNa3WMwS4di4Z_cqzv0ibuFf_I41hIrUm1pUVA/viewform) of INTERLINK**."
msgstr ""

#: ../../testing/acceptance-tests/index.md:116
msgid "Access to the **[Redmine support channel](http://redmine.interlink-project.eu/)**, log in and create a new issue under [proj_wp4_PLATFORM](http://redmine.interlink-project.eu/projects/proj_wp4_platform)"
msgstr ""

#: ../../usermanual/catalogue-interlinkers.md:1
msgid "Catalogue of interlinkers"
msgstr ""

#: ../../usermanual/coproductionprocess-guide.md:1
msgid "Guide section of a coproduction process"
msgstr ""

#: ../../usermanual/coproductionprocess-overview.md:1
msgid "Overview section of a coproduction process"
msgstr ""

#: ../../usermanual/coproductionprocess-settings.md:1
msgid "Settings section of a coproduction process"
msgstr ""

#: ../../usermanual/coproductionprocess-team.md:1
msgid "Team section of a coproduction process"
msgstr ""

#: ../../usermanual/coproductionprocess-workplan.md:1
msgid "Workplan section of a coproduction process"
msgstr ""

#: ../../usermanual/dashboard.md:1
msgid "Dashboard"
msgstr ""

#: ../../usermanual/usermanual.rst:2
msgid "User manual"
msgstr ""
